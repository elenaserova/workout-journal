{"version":3,"sources":["firebase.js","Header.js","ExerciseAllData.js","JournalForm.js","Log.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","className","icon","faDumbbell","ExerciseAllData","props","htmlFor","aria-label","type","name","required","onChange","handleChange","value","exercise","min","sets","reps","weights","onClick","removeLine","JournalForm","event","i","preventDefault","newLine","state","lines","target","setState","handleDateChange","date","inputValidation","btn","id","forEach","line","validInput","pushNewLine","alert","handleAddMore","clearedLines","filter","filterdLine","length","push","linesArr","this","action","map","key","handleClick","prevState","Component","Log","dailyLog","entry","activity","uuidv4","faCheck","removeEntry","entryId","Footer","App","totalLog","log","newLogToBeAdded","database","ref","window","confirm","child","remove","journal","valid","on","snapshot","logs","val","newEntries","individualEntryObject","unshift","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.05d1be8a.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB1UYYMoQVMldNKkOVyUxk4BQeQkSyigSg\",\n  authDomain: \"workoutjournalprojectfive.firebaseapp.com\",\n  databaseURL: \"https://workoutjournalprojectfive.firebaseio.com\",\n  projectId: \"workoutjournalprojectfive\",\n  storageBucket: \"workoutjournalprojectfive.appspot.com\",\n  messagingSenderId: \"989968337436\",\n  appId: \"1:989968337436:web:f7f7b9ba8f13691ffeadd9\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDumbbell } from '@fortawesome/free-solid-svg-icons'\n\nconst Header = () => {\n  return (\n    <header>\n      <div className=\"logo\"><FontAwesomeIcon icon={faDumbbell} /></div>\n      <h1>My Workout Log</h1>\n      <p className=\"intro\"> Track your fitness and strenght training progress, and change up your sets, reps, and weights.</p>\n      <p className=\"subIntro\"><span className=\"howTo\">How to use:</span> List all exercises you did each time (make sure to log date, exercise, number of sets and reps; weights are optional) and then hit \"Log Workout\". New log would appear below. </p>\n    </header>\n  );\n};\n\nexport default Header;","import React from 'react';\n\nfunction ExerciseAllData(props) {\n    return (\n      <div>\n        <label htmlFor='exercise' aria-label=\"Exercise\" className=\"visuallyHidden\" ></label>\n        <input\n          type='text'\n          name='exercise'\n          required\n          onChange={props.handleChange}\n          value={props.exercise || ''}\n          className=\"large\"\n        />\n\n        <input\n          type='number'\n          min=\"1\"\n          name='sets'\n          required\n          onChange={props.handleChange}\n          value={props.sets || ''}\n          className=\"small\"\n        />\n        <label htmlFor='sets'>sets</label>\n\n        <input\n          type='number'\n          min=\"1\"\n          name='reps'\n          required\n          onChange={props.handleChange}\n          value={props.reps || ''}\n          className=\"small\"\n        />\n        <label htmlFor='reps'>reps</label>\n\n        <input\n          type='number'\n          min=\"0\"\n          name='weights'\n          onChange={props.handleChange}\n          value={props.weights || ''}\n          className=\"small\"\n        />\n        <label htmlFor='weights'>lb</label>\n        <button onClick={props.removeLine} className=\"btnRemove\">Remove</button>\n      </div>\n    )\n  }\n\nexport default ExerciseAllData;\n","import React, { Component } from 'react';\nimport ExerciseAllData from \"./ExerciseAllData\";\n\nclass JournalForm extends Component {\n  constructor() {\n    super()\n    this.state = {\n      date: '',\n      lines: [{\n        exercise: '',\n        sets: 0,\n        reps: 0,\n        weights: 0,\n      },],\n      validInput: false\n    }\n  }\n\n  handleChange = (event, i) => {\n    event.preventDefault();\n    const newLine = [...this.state.lines];\n    newLine[i][event.target.name] = event.target.value\n\n    this.setState({\n      lines: newLine\n    })\n  }\n\n  handleDateChange = (event) => {\n    this.setState({\n      date: event.target.value\n    })\n  }\n\n  inputValidation = (event) => {\n    event.preventDefault();\n    const btn = event.target.id\n    this.state.lines.forEach((line) => {\n      if (\n        this.state.date !== '' &&\n        line.exercise &&\n        line.sets > 0 &&\n        line.reps > 0\n      ) {\n\n        this.setState({\n          validInput: true\n        }, () => {\n          if (btn === \"add\") {\n            this.pushNewLine();\n          }\n        });\n      } else {\n        this.setState({\n          validInput: false\n        }, () => {\n          alert(\"You forgot something...please check your entry!\");\n          return\n        })\n      }\n    })\n  }\n\n  pushNewLine() {\n    const linesArr = [...this.state.lines];\n    this.state.validInput === true && linesArr.push({});\n    this.setState({\n      lines: linesArr\n    })\n  }\n\n\n  handleAddMore = (event) => {\n    event.preventDefault();\n    this.inputValidation(event);\n  }\n\n  removeLine = (line, event) => {\n    const allLines = [...this.state.lines];\n    const clearedLines = allLines.filter(filterdLine => filterdLine !== line);\n    clearedLines.length < 1 && clearedLines.push({\n      exercise: '',\n      sets: 0,\n      reps: 0,\n      weights: 0,\n    });  \n\n    this.setState({\n      lines: clearedLines\n    }, () => {});\n    event.preventDefault();\n  }\n\n\n  render() {\n    return (\n      <div className='journal' id=\"journal\">\n        <form action='submit'>\n          <label htmlFor='date' className='date'>Date: </label>\n          <input type='date' name='date' onChange={this.handleDateChange} value={this.state.date} />\n          <p>Exercises:</p>\n          {this.state.lines.map((line, i) => {\n            return (\n              <ExerciseAllData\n                key={`line-${i}`}\n                handleChange={(event) => { this.handleChange(event, i) }}\n                exercise={this.state.lines[i].exercise}\n                sets={this.state.lines[i].sets}\n                reps={this.state.lines[i].reps}\n                weights={this.state.lines[i].weights}\n                removeLine={(event) => this.removeLine(line, event)}\n                />\n            )\n          })}\n\n          <button id=\"add\" onClick={(event) => { this.handleAddMore(event) }}>Add more exercises</button>\n\n          <button id=\"submit\" onClick={(event) => {\n            this.inputValidation(event)\n            if (this.state.validInput) {\n              this.props.handleClick(event, this.state.date, this.state.lines);\n              this.setState(prevState => ({\n                date: '',\n                lines: [{\n                  exercise: '',\n                  sets: 0,\n                  reps: 0,\n                  weights: 0,\n                },],\n                validInput: false\n              }))\n\n            }\n\n          }\n          }>Log workout</button>\n        </form>\n      </div>\n    )\n  }\n}\n\n\nexport default JournalForm","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\nimport uuidv4 from 'uuid';\n\nfunction Log(props) {\n    return(\n      < div className='log' >\n        <p>Date: {props.dailyLog.entry[0][0]}</p>\n\n        {\n          props.dailyLog.entry[0][1].map((activity) => {\n            return (\n              <ul key={uuidv4()}>\n                <li><FontAwesomeIcon icon={faCheck} /><span className=\"highliteEx\">{activity.exercise}</span><span className=\"highlite\"> {activity.sets} </span > sets <span className=\"highlite\">{activity.reps}</span> reps <span className=\"highlite\">{activity.weights}</span> lb</li>\n              </ul>\n            )\n          })\n        }\n        <button onClick={props.removeEntry} id={props.dailyLog.entryId}> Delete Log</button>\n      </div>\n    )\n  }\n\nexport default Log","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n\nconst Footer = () => {\n  return (\n    <footer>\n      <p>\n        Built with ❤️ by\n          Elena Serova, 2019\n\n      </p>\n    </footer>\n  );\n};\n\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\nimport firebase from \"./firebase.js\";\nimport Header from './Header';\nimport JournalForm from './JournalForm';\nimport Log from './Log';\nimport Footer from './Footer';\nimport uuidv4 from 'uuid';\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      journal: [],\n      log: [],\n      valid: false\n    };\n  }\n\n\n  componentDidMount() {\n    // connect App to Firebase in componentDidMount\n    const dbRef = firebase.database().ref();\n\n    // listen on the dbref for when the value of the database changes\n    dbRef.on(\"value\", snapshot => {\n      const logs = snapshot.val();\n      const newEntries = [];\n      for (let key in logs) {\n        const individualEntryObject = {\n          entryId: key,\n          entry: logs[key]\n        }\n        newEntries.unshift(individualEntryObject);\n      }\n\n      this.setState({\n        journal: newEntries\n      });\n\n\n    })\n  }\n\n\n  handleClick = (event, date, lines) => {\n    event.preventDefault();\n    const totalLog = [];\n    totalLog.push(date);\n    totalLog.push(lines);\n    this.setState({\n      log: totalLog\n    })\n\n    const newLogToBeAdded = [];\n    newLogToBeAdded.push(totalLog);\n    //save to firebise\n    const dbRef = firebase.database().ref();\n    dbRef.push(newLogToBeAdded)\n    alert('Good job!💪 You log has been successfully added!')\n  }\n\n\n  removeEntry = (event) => {\n    const question = window.confirm(\"Are you sure?\");\n    if (question === true) {\n      const dbRef = firebase.database().ref();\n      dbRef.child(event.target.id).remove();\n    } else {\n      return\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div className='wrapper'>\n          <Header />\n          <JournalForm\n            handleClick={this.handleClick}\n          />\n          <div className=\"logsContainer\">\n            {this.state.journal.map((dailyLog, i) => {\n              return (\n                <Log key={uuidv4()} dailyLog={dailyLog} removeEntry={this.removeEntry}/>\n              )\n            })}\n          </div>\n        </div >\n        <Footer />\n      </div>\n\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}