{"version":3,"sources":["firebase.js","Header.js","ExerciseAllData.js","JournalForm.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","className","icon","faDumbbell","ExerciseAllData","htmlFor","aria-label","type","name","required","onChange","this","props","handleChange","value","exercise","min","sets","reps","weights","Component","JournalForm","event","i","preventDefault","newLine","state","lines","target","setState","handleDateChange","date","inputValidation","forEach","line","validInput","pushNewLine","alert","handleAddMore","push","id","action","map","key","onClick","handleClick","App","console","log","totalLog","newLogToBeAdded","database","ref","removeEntry","window","confirm","child","remove","journal","valid","on","snapshot","logs","val","newEntries","individualEntryObject","entryId","entry","unshift","dailyLog","activity","uuidv4","faCheck","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a8d6f2c.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB1UYYMoQVMldNKkOVyUxk4BQeQkSyigSg\",\n  authDomain: \"workoutjournalprojectfive.firebaseapp.com\",\n  databaseURL: \"https://workoutjournalprojectfive.firebaseio.com\",\n  projectId: \"workoutjournalprojectfive\",\n  storageBucket: \"workoutjournalprojectfive.appspot.com\",\n  messagingSenderId: \"989968337436\",\n  appId: \"1:989968337436:web:f7f7b9ba8f13691ffeadd9\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDumbbell } from '@fortawesome/free-solid-svg-icons'\n\nconst Header = () => {\n  return (\n    <header>\n      <div className=\"logo\"><FontAwesomeIcon icon={faDumbbell} /></div>\n      <h1>My Workout Log</h1>\n      <p className=\"intro\"> Track your fitness and strenght training progress, and change up your sets, reps, and weights.</p>\n      <p className=\"subIntro\"><span className=\"howTo\">How to use:</span> List all exercises you did each time (make sure to log date, exercise, number of sets and reps; weights are optional) and then hit \"Log Workout\". New log would appear below. </p>\n    </header>\n  );\n};\n\nexport default Header;","import React, { Component } from 'react';\n\n\nclass ExerciseAllData extends Component {\n\n\n\n  render() {\n    return (\n      <div>\n\n\n        <label htmlFor='exercise' aria-label=\"Exercise\" className=\"visuallyHidden\" ></label>\n        <input\n          type='text'\n          name='exercise'\n          required\n          onChange={this.props.handleChange}\n          value={this.props.exercise}\n          className=\"large\"\n        />\n\n        <input\n          type='number'\n          min=\"1\"\n          name='sets'\n          required\n          onChange={this.props.handleChange}\n          value={this.props.sets}\n          className=\"small\"\n        />\n        <label htmlFor='sets'>sets</label>\n\n        <input\n          type='number'\n          min=\"1\"\n          name='reps'\n          required\n          onChange={this.props.handleChange}\n          value={this.props.reps}\n          className=\"small\"\n        />\n        <label htmlFor='reps'>reps</label>\n\n        <input\n          type='number'\n          min=\"0\"\n          name='weights'\n          onChange={this.props.handleChange}\n          value={this.props.weights}\n          className=\"small\"\n        />\n        <label htmlFor='weights'>lb</label>\n      </div>\n    )\n  }\n}\nexport default ExerciseAllData;\n","import React, { Component } from 'react';\nimport ExerciseAllData from \"./ExerciseAllData\";\n\nclass JournalForm extends Component {\n  constructor() {\n    super()\n    this.state = {\n      date: '',\n      lines: [{\n        exercise: '',\n        sets: 0,\n        reps: 0,\n        weights: 0,\n      },],\n      validInput: false\n    }\n  }\n\n\n  handleChange = (event, i) => {\n    event.preventDefault();\n    const newLine = [...this.state.lines];\n    newLine[i][event.target.name] = event.target.value\n\n\n    this.setState({\n      lines: newLine\n\n    })\n  }\n\n  handleDateChange = (event) => {\n    this.setState({\n      date: event.target.value\n\n    })\n  }\n\n  inputValidation = () => {\n\n    this.state.lines.forEach((line) => {\n\n      if (\n\n        this.state.date !== '' &&\n        line.exercise &&\n        line.sets > 0 &&\n        line.reps > 0\n\n      ) {\n        this.setState({\n          validInput: true\n\n        }, () => {\n          this.pushNewLine();\n        });\n      } else {\n        this.setState({\n          validInput: false\n\n        }, () => {\n          alert(\"You forgot something...please check your entry!\");\n\n        })\n\n      }\n\n    })\n\n  }\n\n  pushNewLine() {\n    if (this.state.validInput === true) {\n      const newLine = [...this.state.lines];\n      newLine.push({})\n      this.setState({\n        lines: newLine\n      })\n    }\n\n  }\n\n\n  handleAddMore = (event) => {\n    event.preventDefault();\n    this.inputValidation();\n  }\n\n\n  render() {\n    return (\n      <div className='journal' id=\"journal\">\n        <form action='submit'>\n          <label htmlFor='date' className='date'>Date: </label>\n          <input type='date' name='date' onChange={this.handleDateChange} value={this.state.date} />\n          <p>Exercises:</p>\n\n\n\n          {this.state.lines.map((line, i) => {\n            return (\n              <ExerciseAllData\n                key={`line-${i}`}\n                handleChange={(event) => { this.handleChange(event, i) }}\n                exercise={this.state.lines[i].exercise}\n                sets={this.state.lines[i].sets}\n                reps={this.state.lines[i].reps}\n                weights={this.state.lines[i].weights} />\n            )\n          })}\n\n          <button onClick={(event) => { this.handleAddMore(event) }}>Add more exercises</button>\n\n          <button onClick={(event) => {\n            this.props.handleClick(event, this.state.date, this.state.lines);\n            // this.setState(prevState => ({\n            //   date: '',\n            //   lines: [{\n            //     exercise: '',\n            //     sets: 0,\n            //     reps: 0,\n            //     weights: 0,\n            //   },],\n            //   validInput: false\n\n            // }))\n          }\n          }>Log workout</button>\n        </form>\n      </div>\n    )\n  }\n}\n\n\nexport default JournalForm","import React, { Component } from 'react';\nimport './App.css';\nimport firebase from \"./firebase.js\";\nimport Header from './Header';\nimport JournalForm from './JournalForm';\nimport uuidv4 from 'uuid';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      journal: [],\n      log: [],\n      valid: false\n    };\n  }\n\n\n  componentDidMount() {\n    // connect App to Firebase in componentDidMount\n    const dbRef = firebase.database().ref();\n\n    // listen on the dbref for when the value of the database changes\n    dbRef.on(\"value\", snapshot => {\n      const logs = snapshot.val();\n      console.log(logs);\n      const newEntries = [];\n      for (let key in logs) {\n        const individualEntryObject = {\n          entryId: key,\n          entry: logs[key]\n        }\n        newEntries.unshift(individualEntryObject);\n      }\n\n      this.setState({\n        journal: newEntries\n      });\n\n\n    })\n  }\n\n\n  handleClick = (event, date, lines) => {\n    event.preventDefault();\n\n    console.log(lines);\n    console.log(lines[0].exercise);\n    const totalLog = [];\n    totalLog.push(date);\n    totalLog.push(lines);\n    this.setState({\n      log: totalLog\n    })\n\n    const newLogToBeAdded = [];\n    newLogToBeAdded.push(totalLog);\n    console.log(newLogToBeAdded);\n    console.log(totalLog)\n    //save to firebise\n    const dbRef = firebase.database().ref();\n    dbRef.push(newLogToBeAdded)\n  }\n\n  // handleClick = (event, date, lines) => {\n  //   event.preventDefault();\n  //   lines.forEach((line, i) => {\n  //     if (\n  //       lines[i].exercise &&\n  //       lines[i].sets > 0 &&\n  //       lines[i].reps > 0\n  //     ) {\n  //       console.log(\"hi1!!!\")\n  //       this.setState({\n  //         valid: true\n\n\n  //       }, () => {\n  //         this.testFunction();\n  //       });\n  //       console.log(this.state.valid)\n  //     } {\n  //       console.log(\"nope\")\n  //       this.setState({\n  //         valid: false\n\n  //       }, () => {\n  //         alert(\"Hey! You forgot something!\");\n  //         return\n\n  //       })\n\n  //     }\n  //   })\n\n  // }\n\n  // testFunction(date, lines) {\n  //   if (this.state.valid === true) {\n  //     const totalLog = [];\n  //     totalLog.push(date);\n  //     totalLog.push(lines);\n  //     this.setState({\n  //       log: totalLog\n  //     })\n\n  //     const newLogToBeAdded = [];\n  //     newLogToBeAdded.push(totalLog);\n  //     console.log(newLogToBeAdded);\n  //     console.log(totalLog)\n  //     //save to firebise\n  //     const dbRef = firebase.database().ref();\n  //     dbRef.push(newLogToBeAdded)\n  //   }\n\n  // }\n\n\n\n\n\n  removeEntry = (event) => {\n    const question = window.confirm(\"Are you sure?\");\n    if (question === true) {\n      const dbRef = firebase.database().ref();\n      dbRef.child(event.target.id).remove();\n    } else {\n      return\n    }\n  }\n\n\n  render() {\n    return (\n      <div className='wrapper'>\n        <Header />\n        <JournalForm\n          handleClick={this.handleClick}\n\n        />\n\n\n        <div className=\"logsContainer\">\n          {this.state.journal.map((dailyLog, i) => {\n            return (\n\n\n              < div className='log' key={i} >\n                <p>Date: {dailyLog.entry[0][0]}</p>\n\n                {\n                  dailyLog.entry[0][1].map((activity) => {\n                    return (\n\n\n                      <ul key={uuidv4()}>\n                        <li><FontAwesomeIcon icon={faCheck} /><span className=\"highliteEx\">{activity.exercise}</span><span className=\"highlite\"> {activity.sets} </span > sets <span className=\"highlite\">{activity.reps}</span> reps <span className=\"highlite\">{activity.weights}</span> lb</li>\n                      </ul>\n                    )\n                  })\n                }\n                <button onClick={this.removeEntry} id={dailyLog.entryId}> Delete Log</button>\n              </div>\n\n\n            )\n          })}\n\n        </div>\n\n\n      </div >\n\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}